/*
HTML5 Reset :: style.css
----------------------------------------------------------
We have learned much from/been inspired by/taken code where offered from:
Eric Meyer					:: http://meyerweb.com
HTML5 Doctor				:: http://html5doctor.com
and the HTML5 Boilerplate	:: http://html5boilerplate.com
-------------------------------------------------------------------------------*/
/* Let's default this puppy out
-------------------------------------------------------------------------------*/
html,
body,
body div,
span,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
abbr,
address,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
samp,
small,
strong,
sub,
sup,
var,
b,
i,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
figure,
footer,
header,
menu,
nav,
section,
time,
mark,
audio,
video,
details,
summary {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font-weight: normal;
  vertical-align: baseline;
  background: transparent;
}

main,
article,
aside,
figure,
footer,
header,
nav,
section,
details,
summary {
  display: block;
}

/* Handle box-sizing while better addressing child elements:
http://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
html {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

*,
*:before,
*:after {
  -webkit-box-sizing: inherit;
  box-sizing: inherit;
}

/* consider resetting the default cursor: https://gist.github.com/murtaugh/5247154 */
/* Responsive images and other embedded objects */
/* if you don't have full control over `img` tags (if you have to overcome attributes), consider adding height: auto */
img,
object,
embed {
  max-width: 100%;
}

/*
Note: keeping IMG here will cause problems if you're using foreground images as sprites.
In fact, it *will* cause problems with Google Maps' controls at small size.
If this is the case for you, try uncommenting the following:
#map img {
max-width: none;
}
*/
/* force a vertical scrollbar to prevent a jumpy page */
html {
  overflow-y: scroll;
}

/* we use a lot of ULs that aren't bulleted.
you'll have to restore the bullets within content,
which is fine because they're probably customized anyway */
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}

a {
  margin: 0;
  padding: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

del {
  text-decoration: line-through;
}

abbr[title],
dfn[title] {
  border-bottom: 1px dotted #000;
  cursor: help;
}

/* tables still need cellspacing="0" in the markup */
table {
  border-collapse: separate;
  border-spacing: 0;
}

th {
  font-weight: bold;
  vertical-align: bottom;
}

td {
  font-weight: normal;
  vertical-align: top;
}

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

input,
select {
  vertical-align: middle;
}

pre {
  white-space: pre;
  /* CSS2 */
  white-space: pre-wrap;
  /* CSS 2.1 */
  white-space: pre-line;
  /* CSS 3 (and 2.1 as well, actually) */
  word-wrap: break-word;
  /* IE */
}

input[type="radio"] {
  vertical-align: text-bottom;
}

input[type="checkbox"] {
  vertical-align: bottom;
}

.ie7 input[type="checkbox"] {
  vertical-align: baseline;
}

.ie6 input {
  vertical-align: text-bottom;
}

select,
input,
textarea {
  font: 99% sans-serif;
}

table {
  font-size: inherit;
  font: 100%;
}

small {
  font-size: 85%;
}

strong {
  font-weight: bold;
}

td,
td img {
  vertical-align: top;
}

/* Make sure sup and sub don't mess with your line-heights http://gist.github.com/413930 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* standardize any monospaced elements */
pre,
code,
kbd,
samp {
  font-family: monospace, sans-serif;
}

/* hand cursor on clickable elements */
.clickable,
label,
input[type=button],
input[type=submit],
input[type=file],
button {
  cursor: pointer;
}

/* Webkit browsers add a 2px margin outside the chrome of form elements */
button,
input,
select,
textarea {
  margin: 0;
}

/* make buttons play nice in IE */
button,
input[type=button] {
  width: auto;
  overflow: visible;
}

/* scale images in IE7 more attractively */
.ie7 img {
  -ms-interpolation-mode: bicubic;
}

/* prevent BG image flicker upon hover
(commented out as usage is rare, and the filter syntax messes with some pre-processors)
.ie6 html {filter: expression(document.execCommand("BackgroundImageCache", false, true));}
*/
/* let's clear some floats */
.clearfix:after {
  content: " ";
  display: block;
  clear: both;
}

.container {
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
}

.container .row::before,
.container .row::after {
  content: "";
  display: block;
  clear: both;
  height: 0;
  visibility: hidden;
}

.container [class*='col-'] {
  float: none;
  min-height: 1px;
  width: 100%;
}

@media (min-width: 640px) {
  .container [class*='col-'] {
    float: left;
  }
  .container .col-1 {
    width: 12.5%;
  }
  .container .col-2 {
    width: 25%;
  }
  .container .col-3 {
    width: 37.5%;
  }
  .container .col-4 {
    width: 50%;
  }
  .container .col-5 {
    width: 62.5%;
  }
  .container .col-6 {
    width: 75%;
  }
}

nav.container .row {
  padding-top: 15px;
}

nav.container .row .logo {
  height: 75px;
  background-image: url(../images/logo.png);
  background-size: contain;
  background-repeat: no-repeat;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: flex-end;
  color: #b49765;
  font-size: 35px;
}

nav.container .row .logo i {
  margin: 20px;
}

nav.container .row .logo i:hover {
  cursor: pointer;
}

nav.container .row .menu {
  color: #b49765;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -ms-flex-line-pack: center;
      align-content: center;
}

nav.container .row .menu ul {
  width: 95%;
}

nav.container .row .menu li {
  color: white;
  height: 45px;
  text-transform: uppercase;
  text-align: center;
  background-color: rgba(155, 155, 155, 0.3);
  margin: 4px auto;
  padding: 15px 0;
  -ms-flex-item-align: center;
      align-self: center;
}

@media (min-width: 640px) {
  nav.container .row .menu ul {
    display: -webkit-inline-box;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
  nav.container .row .menu li {
    width: 11.66%;
    background-color: transparent;
    text-align: left;
    font-size: 12px;
  }
  nav.container .row .menu li:nth-of-type(4),
  nav.container .row .menu li:nth-of-type(5),
  nav.container .row .menu li:nth-of-type(6) {
    text-align: right;
  }
  nav.container .row .menu img {
    width: 20%;
    height: 100%;
  }
}

@media (min-width: 780px) {
  nav.container .row .menu li {
    font-size: 16px;
  }
}

.top_article {
  padding-top: 25px;
}

@media (min-width: 640px) {
  .top_article div {
    height: 80vh;
  }
}

.top_article div div {
  overflow: hidden;
}

.top_article .left {
  padding: 20px 50px;
  text-align: center;
}

@media (min-width: 640px) {
  .top_article .left {
    padding: 50px 20px;
  }
}

@media (min-width: 800px) {
  .top_article .left {
    padding: 80px 20px;
  }
}

.top_article h1 {
  text-transform: uppercase;
  font-size: 1.5em;
  color: #b49765;
  margin-bottom: 20%;
  font-weight: 700;
}

@media (min-width: 640px) {
  .top_article h1 {
    font-size: 1.7em;
    margin-bottom: 10%;
    margin-top: 0;
  }
}

@media (min-width: 800px) {
  .top_article h1 {
    font-size: 2em;
    margin-bottom: 10%;
    margin-top: 10%;
  }
}

.top_article p {
  color: white;
  margin: 0 5px 40px 5px;
  font-size: 12px;
}

@media (min-width: 640px) {
  .top_article p {
    margin: 0 5%;
    font-size: 15px;
  }
}

@media (min-width: 800px) {
  .top_article p {
    margin: 0 10%;
    font-size: 18px;
  }
}

.top_article .right {
  position: relative;
}

.top_article .right img {
  width: 100%;
}

@media (min-width: 640px) {
  .top_article .right img {
    max-width: 75%;
    width: auto;
    max-height: 90%;
    top: 10%;
    right: 0;
    position: absolute;
  }
}

body {
  background-image: url(../images/background.png);
  background-size: cover;
  background-repeat: no-repeat;
  background-color: #929292;
  font-family: 'Lato', sans-serif;
}

.desktop {
  display: none;
}

@media (min-width: 640px) {
  .desktop {
    display: inline;
  }
}

.mobile {
  display: block;
}

@media (min-width: 640px) {
  .mobile {
    display: none;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
